// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ayMB79M2Zha2oXCHU8VvVd
// Component: wsYVvP0AoOUV
import * as React from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import {
  PlasmicImg as PlasmicImg__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  initializeCodeComponentStates,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataOp } from "@plasmicapp/react-web/lib/data-sources";
import Header from "../../Header"; // plasmic-import: HqmQP133pVT3/component
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import Slider from "../../Slider"; // plasmic-import: J1DclQ3GRL5-/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: ayMB79M2Zha2oXCHU8VvVd/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: wsYVvP0AoOUV/css

createPlasmicElementProxy;

export const PlasmicHomepage__VariantProps = new Array();

export const PlasmicHomepage__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  let [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "input5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "Harshavardhan",
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          "Frontend Developer Intern",
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input7.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "91069898",
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input8.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "9390046976",
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "slider.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "slider2.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "slider3.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const new$Queries = {
    date: usePlasmicDataOp(() => {
      return {
        sourceId: "53jKhWPN1nAofbBQzDxVGV",
        opId: "3691b304-ad13-4f0a-9ad1-ec8eea905b3f",
        userArgs: {},
        cacheKey: `plasmic.$.${(() => {
          try {
            return undefined;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return "";
            }
            throw e;
          }
        })()}.$.3691b304-ad13-4f0a-9ad1-ec8eea905b3f.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
    $queries = new$Queries;
  }
  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicHomepage.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicHomepage.pageMetadata.title}
        />

        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicHomepage.pageMetadata.title}
        />

        <meta
          key="description"
          name="description"
          content={PlasmicHomepage.pageMetadata.description}
        />

        <meta
          key="og:description"
          property="og:description"
          content={PlasmicHomepage.pageMetadata.description}
        />

        <meta
          key="twitter:description"
          name="twitter:description"
          content={PlasmicHomepage.pageMetadata.description}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          aria-label={"Harsha"}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
          onClick={async event => {
            const $steps = {};
            $steps["runCode"] = true
              ? (() => {
                  const actionArgs = {
                    customFunction: async () => {
                      return undefined;
                    }
                  };
                  return (({ customFunction }) => {
                    return customFunction();
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["runCode"] != null &&
              typeof $steps["runCode"] === "object" &&
              typeof $steps["runCode"].then === "function"
            ) {
              $steps["runCode"] = await $steps["runCode"];
            }
            $steps["updateStateVariable"] = true
              ? (() => {
                  const actionArgs = {};
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;
                    undefined;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateStateVariable"] != null &&
              typeof $steps["updateStateVariable"] === "object" &&
              typeof $steps["updateStateVariable"].then === "function"
            ) {
              $steps["updateStateVariable"] = await $steps[
                "updateStateVariable"
              ];
            }
          }}
        >
          <div className={classNames(projectcss.all, sty.freeBox__iCowx)}>
            <div className={classNames(projectcss.all, sty.freeBox__oJYoB)}>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__x7TY)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__sehh2)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__sQx6H)}
                  >
                    <Header
                      data-plasmic-name={"header"}
                      data-plasmic-override={overrides.header}
                      className={classNames("__wab_instance", sty.header)}
                    />
                  </div>
                </div>
              </Stack__>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__onc49)}>
              <div className={classNames(projectcss.all, sty.columns__qvwDo)}>
                <div className={classNames(projectcss.all, sty.column__ymZxs)}>
                  <div
                    className={classNames(projectcss.all, sty.columns__lgLE)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__cXukm)}
                    >
                      <PlasmicImg__
                        data-plasmic-name={"img"}
                        data-plasmic-override={overrides.img}
                        alt={""}
                        className={classNames(sty.img)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"277px"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/commerce_landing_page/images/ellipse10.png",
                          fullWidth: 512,
                          fullHeight: 512,
                          aspectRatio: undefined
                        }}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column___34Taf)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___9LmMn
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__gcO8
                          )}
                        >
                          {"Profile"}
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__lt7O
                        )}
                      >
                        {"NAME"}
                      </div>
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input5),
                          onChange: async (...eventArgs) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input5", "value"],
                              AntdInput_Helpers
                            ).apply(null, eventArgs);
                          },
                          readOnly: true,
                          value: generateStateValueProp($state, [
                            "input5",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input5.value"
                            }
                          ],

                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );
                        return (
                          <AntdInput
                            data-plasmic-name={"input5"}
                            data-plasmic-override={overrides.input5}
                            {...child$Props}
                          />
                        );
                      })()}
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__xvDGj
                        )}
                      >
                        {"Role"}
                      </div>
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input6),
                          onChange: async (...eventArgs) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input6", "value"],
                              AntdInput_Helpers
                            ).apply(null, eventArgs);
                          },
                          readOnly: true,
                          value: generateStateValueProp($state, [
                            "input6",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input6.value"
                            }
                          ],

                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );
                        return (
                          <AntdInput
                            data-plasmic-name={"input6"}
                            data-plasmic-override={overrides.input6}
                            {...child$Props}
                          />
                        );
                      })()}
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___01Ycc
                        )}
                      >
                        {"Code"}
                      </div>
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input7),
                          onChange: async (...eventArgs) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input7", "value"],
                              AntdInput_Helpers
                            ).apply(null, eventArgs);
                          },
                          readOnly: true,
                          type: "number",
                          value: generateStateValueProp($state, [
                            "input7",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input7.value"
                            }
                          ],

                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );
                        return (
                          <AntdInput
                            data-plasmic-name={"input7"}
                            data-plasmic-override={overrides.input7}
                            {...child$Props}
                          />
                        );
                      })()}
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__bY3O3
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__f5D49
                          )}
                        >
                          {"Phone Number"}
                        </div>
                      </div>
                      {(() => {
                        const child$Props = {
                          autoFocus: false,
                          className: classNames("__wab_instance", sty.input8),
                          onChange: async (...eventArgs) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input8", "value"],
                              AntdInput_Helpers
                            ).apply(null, eventArgs);
                          },
                          readOnly: true,
                          type: "tel",
                          value: generateStateValueProp($state, [
                            "input8",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input8.value"
                            }
                          ],

                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );
                        return (
                          <AntdInput
                            data-plasmic-name={"input8"}
                            data-plasmic-override={overrides.input8}
                            {...child$Props}
                          />
                        );
                      })()}
                    </div>
                  </div>
                </div>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.column__dwXj)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___9W7PK
                    )}
                  >
                    {"Available leaves"}
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__oxjqX)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.columns__d5X4)}
                    >
                      <div
                        className={classNames(projectcss.all, sty.column__hXzZ)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__vXycL
                          )}
                        >
                          {"Sick Leaves "}
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__xptV7
                        )}
                      >
                        <Slider
                          data-plasmic-name={"slider"}
                          data-plasmic-override={overrides.slider}
                          className={classNames("__wab_instance", sty.slider)}
                          filled={true}
                          initialValue={0}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___3Cq9X
                              )}
                            >
                              {"SL"}
                            </div>
                          }
                          maxValue={5}
                          minValue={0}
                          onChange={async (...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "slider",
                              "value"
                            ]).apply(null, eventArgs);
                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                        />
                      </div>
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__yMmAf)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.columns__vbmmu)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column___8Q5C8
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___33Uat
                          )}
                        >
                          {"Annunal Leaves"}
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column___0DsSi
                        )}
                      >
                        <Slider
                          data-plasmic-name={"slider2"}
                          data-plasmic-override={overrides.slider2}
                          className={classNames("__wab_instance", sty.slider2)}
                          filled={true}
                          initialValue={0}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__eDuNf
                              )}
                            >
                              {"SL"}
                            </div>
                          }
                          maxValue={20}
                          minValue={0}
                          onChange={async (...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "slider2",
                              "value"
                            ]).apply(null, eventArgs);
                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                        />
                      </div>
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__vnm4E)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.columns__sHtTl)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__dmBmb
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__lOpeh
                          )}
                        >
                          {"Compassionate leaves "}
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__jGpfq
                        )}
                      >
                        <Slider
                          data-plasmic-name={"slider3"}
                          data-plasmic-override={overrides.slider3}
                          className={classNames("__wab_instance", sty.slider3)}
                          filled={true}
                          initialValue={0}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__ww9Cd
                              )}
                            >
                              {"CL"}
                            </div>
                          }
                          maxValue={10}
                          minValue={0}
                          onChange={async (...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "slider3",
                              "value"
                            ]).apply(null, eventArgs);
                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                        />
                      </div>
                    </div>
                  </div>
                </Stack__>
              </div>
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__l7Jdy
              )}
            >
              {"Leave Status "}
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "img",
    "input5",
    "input6",
    "input7",
    "input8",
    "slider",
    "slider2",
    "slider3"
  ],

  header: ["header"],
  img: ["img"],
  input5: ["input5"],
  input6: ["input6"],
  input7: ["input7"],
  input8: ["input8"],
  slider: ["slider"],
  slider2: ["slider2"],
  slider3: ["slider3"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    img: makeNodeComponent("img"),
    input5: makeNodeComponent("input5"),
    input6: makeNodeComponent("input6"),
    input7: makeNodeComponent("input7"),
    input8: makeNodeComponent("input8"),
    slider: makeNodeComponent("slider"),
    slider2: makeNodeComponent("slider2"),
    slider3: makeNodeComponent("slider3"),
    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "ShoeShop",
      description:
        "Ad ullamcorper eros nibh pharetra vulputate imperdiet consectetur vestibulum at ac posuere volutpat maecenas gravida dictum suscipit habitasse class scelerisque fermentum blandit mi a.",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
