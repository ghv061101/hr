// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ayMB79M2Zha2oXCHU8VvVd
// Component: HqmQP133pVT3
import * as React from "react";
import Link from "next/link";
import { useRouter } from "next/router";
import {
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateStateOnChangeProp,
  generateStateValueProp,
  hasVariant,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import MenuButton from "../../MenuButton"; // plasmic-import: 4CohE_ftpdK5/component
import LinkButton from "../../LinkButton"; // plasmic-import: HOWiVINaW4Ow/component
import IconLink from "../../IconLink"; // plasmic-import: vFCQNVgdowh3/component
import { AntdDropdown } from "@plasmicpkgs/antd5/skinny/registerDropdown";
import { AntdMenuItem } from "@plasmicpkgs/antd5/skinny/registerMenu";
import { AntdPopover } from "@plasmicpkgs/antd5/skinny/registerPopover";
import { useScreenVariants as useScreenVariantsg3WJl7Ma3Cux } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: G3wJl7Ma3Cux/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: ayMB79M2Zha2oXCHU8VvVd/projectcss
import sty from "./PlasmicHeader.module.css"; // plasmic-import: HqmQP133pVT3/css
import ProfileIcon from "./icons/PlasmicIcon__Profile"; // plasmic-import: uRgoqHXaOAXS/icon

createPlasmicElementProxy;

export const PlasmicHeader__VariantProps = new Array("expanded");

export const PlasmicHeader__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHeader__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "expanded",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.expanded
      },
      {
        path: "popover.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsg3WJl7Ma3Cux()
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root,
        { [sty.rootexpanded]: hasVariant($state, "expanded", "expanded") }
      )}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__auUPj)}
      >
        <MenuButton
          data-plasmic-name={"menuButton"}
          data-plasmic-override={overrides.menuButton}
          className={classNames("__wab_instance", sty.menuButton, {
            [sty.menuButtonexpanded]: hasVariant($state, "expanded", "expanded")
          })}
          expanded={
            hasVariant($state, "expanded", "expanded") &&
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? true
              : undefined
          }
        />

        <PlasmicLink__
          data-plasmic-name={"link"}
          data-plasmic-override={overrides.link}
          className={classNames(projectcss.all, projectcss.a, sty.link)}
          component={Link}
          href={"/"}
          platform={"nextjs"}
        >
          <PlasmicImg__
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img)}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={"none"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"100%"}
            src={{
              src: "/plasmic/commerce_landing_page/images/logo2Png.png",
              fullWidth: 732,
              fullHeight: 341,
              aspectRatio: undefined
            }}
          />
        </PlasmicLink__>
        <div
          className={classNames(projectcss.all, sty.freeBox__mkaDj, {
            [sty.freeBoxexpanded__mkaDj17Gtr]: hasVariant(
              $state,
              "expanded",
              "expanded"
            )
          })}
        >
          <LinkButton
            className={classNames("__wab_instance", sty.linkButton__df7P)}
            href={"/#home"}
            size={"small"}
            text={null}
            type={"blankGray"}
          />

          <LinkButton
            className={classNames("__wab_instance", sty.linkButton__u9KBw)}
            href={"/#new-arrival"}
            size={"small"}
            text={null}
            type={"blankGray"}
          />

          <LinkButton
            className={classNames("__wab_instance", sty.linkButton__sX1Tc)}
            href={"/#features"}
            size={"small"}
            text={null}
            type={"blankGray"}
          />

          <LinkButton
            className={classNames("__wab_instance", sty.linkButton__d7Su4)}
            href={"/#contact"}
            size={"small"}
            text={null}
            type={"blankGray"}
          />
        </div>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__vy70X)}
        >
          <IconLink
            className={classNames("__wab_instance", sty.iconLink__g1SLk)}
            icon={null}
          />

          <IconLink
            className={classNames("__wab_instance", sty.iconLink___23RrD)}
            icon={
              <ProfileIcon
                data-plasmic-name={"svg"}
                data-plasmic-override={overrides.svg}
                className={classNames(projectcss.all, sty.svg)}
                role={"img"}
              />
            }
          />

          <IconLink
            className={classNames("__wab_instance", sty.iconLink__tsoi7)}
            icon={
              <AntdDropdown
                data-plasmic-name={"dropdown"}
                data-plasmic-override={overrides.dropdown}
                className={classNames("__wab_instance", sty.dropdown)}
                dropdownMenuScopeClassName={sty["dropdown__dropdownMenu"]}
                menuItems={() => (
                  <React.Fragment>
                    <AntdMenuItem
                      className={classNames(
                        "__wab_instance",
                        sty.menuItem__rz1J4
                      )}
                      key={"menu-item-1"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__iYmF
                        )}
                      >
                        {"Menu item"}
                      </div>
                    </AntdMenuItem>
                    <AntdMenuItem
                      className={classNames(
                        "__wab_instance",
                        sty.menuItem__a5MFs
                      )}
                      key={"menu-item-2"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__fHvoq
                        )}
                      >
                        {"Menu item"}
                      </div>
                    </AntdMenuItem>
                  </React.Fragment>
                )}
                menuItemsJson={[
                  { type: "item", value: "action1", label: "Action 1" }
                ]}
              >
                <AntdPopover
                  data-plasmic-name={"popover"}
                  data-plasmic-override={overrides.popover}
                  arrow={true}
                  children={null}
                  className={classNames("__wab_instance", sty.popover)}
                  content={null}
                  contentText={"logout"}
                  defaultStylesClassName={classNames(
                    projectcss.root_reset,
                    projectcss.plasmic_default_styles,
                    projectcss.plasmic_mixins,
                    projectcss.plasmic_tokens,
                    plasmic_antd_5_hostless_css.plasmic_tokens,
                    plasmic_plasmic_rich_components_css.plasmic_tokens
                  )}
                  mouseEnterDelay={0}
                  mouseLeaveDelay={0}
                  onOpenChange={async (...eventArgs) => {
                    generateStateOnChangeProp($state, [
                      "popover",
                      "open"
                    ]).apply(null, eventArgs);
                  }}
                  open={generateStateValueProp($state, ["popover", "open"])}
                  popoverScopeClassName={sty["popover__popover"]}
                  title={null}
                />
              </AntdDropdown>
            }
          />
        </Stack__>
      </Stack__>
      <div
        className={classNames(projectcss.all, sty.freeBox___0Zw6S, {
          [sty.freeBoxexpanded___0Zw6S17Gtr]: hasVariant(
            $state,
            "expanded",
            "expanded"
          )
        })}
      >
        <LinkButton
          className={classNames("__wab_instance", sty.linkButton__fL2SK)}
          text={"Home"}
          type={"blankGray"}
        />

        <LinkButton
          className={classNames("__wab_instance", sty.linkButton___66Ene)}
          text={"New Arrival"}
          type={"blankGray"}
        />

        <LinkButton
          className={classNames("__wab_instance", sty.linkButton__aWiMi)}
          text={"Features"}
          type={"blankGray"}
        />

        <LinkButton
          className={classNames("__wab_instance", sty.linkButton__bfnii)}
          text={"Blog"}
          type={"blankGray"}
        />

        <LinkButton
          className={classNames("__wab_instance", sty.linkButton__xCQb3)}
          text={"Contact"}
          type={"blankGray"}
        />
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "menuButton", "link", "img", "svg", "dropdown", "popover"],
  menuButton: ["menuButton"],
  link: ["link", "img"],
  img: ["img"],
  svg: ["svg"],
  dropdown: ["dropdown", "popover"],
  popover: ["popover"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHeader__ArgProps,
          internalVariantPropNames: PlasmicHeader__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHeader__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHeader";
  } else {
    func.displayName = `PlasmicHeader.${nodeName}`;
  }
  return func;
}

export const PlasmicHeader = Object.assign(
  // Top-level PlasmicHeader renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    menuButton: makeNodeComponent("menuButton"),
    link: makeNodeComponent("link"),
    img: makeNodeComponent("img"),
    svg: makeNodeComponent("svg"),
    dropdown: makeNodeComponent("dropdown"),
    popover: makeNodeComponent("popover"),
    // Metadata about props expected for PlasmicHeader
    internalVariantProps: PlasmicHeader__VariantProps,
    internalArgProps: PlasmicHeader__ArgProps
  }
);

export default PlasmicHeader;
/* prettier-ignore-end */
